from Crypto.Util.number import inverse, long_to_bytes
import gmpy2


n=45109760255834684754983589295969725310626328534802429650039558168167072337918473534586289686536635992885101263834302951907737904559260123769463991894980774542481
e=65537
c = 37358207842489278501844590204436061248784995840567905372310756710267273487596583866873282674084579361285279392052165188243528456115376968934859883995305365787773

fs = [567438481 , 606925769 , 616037419 , 632480843 , 717907921 , 830813623 , 842597461  , 878387431 , 926136593 , 957106811 , 1046408651 , 1058492087 , 1058962693 , 1061140099 , 1066149767]
phi = 1
for x in fs:
    phi *= x - 1

# 865092131^3
phi *= 865092130
phi *= 865092131
phi *= 865092131
d = gmpy2.invert(e,phi)
print(long_to_bytes(pow(c,d,n)))
