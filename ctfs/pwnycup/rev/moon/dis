; Function:        0
; Defined at line: 0
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       2
; Max Stack Size:  9

    0 [-]: CLOSURE   R0 0         ; R0 := closure(Function #0_0)
    1 [-]: SETGLOBAL R0 K0        ; Combine := R0
    
    2 [-]: CLOSURE   R0 1         ; R0 := closure(Function #0_1)
    3 [-]: SETGLOBAL R0 K1        ; Enc1 := R0
    
    4 [-]: CLOSURE   R0 2         ; R0 := closure(Function #0_2)
    5 [-]: SETGLOBAL R0 K2        ; Enc2 := R0
    
    6 [-]: CLOSURE   R0 3         ; R0 := closure(Function #0_3)
    7 [-]: SETGLOBAL R0 K3        ; Enc3 := R0
    
    8 [-]: CLOSURE   R0 4         ; R0 := closure(Function #0_4)
    9 [-]: SETGLOBAL R0 K4        ; Enc4 := R0


   10 [-]: GETGLOBAL R0 K5        ; R0 := io
   11 [-]: GETTABLE  R0 R0 K6     ; R0 := R0["write"]
   12 [-]: LOADK     R1 K7        ; R1 := "Enter flag: "
   13 [-]: CALL      R0 2 1       ;  := R0(R1)
   14 [-]: GETGLOBAL R0 K5        ; R0 := io
   15 [-]: GETTABLE  R0 R0 K8     ; R0 := R0["read"]
   16 [-]: CALL      R0 1 2       ; R0 := R0()
   17 [-]: LEN       R1 R0        ; R1 := #R0
   18 [-]: EQ        1 R1 K9      ; if R1 ~= 40 then goto 20 else goto 24
   19 [-]: JMP       4            ; PC += 4 (goto 24)
   20 [-]: GETGLOBAL R1 K10       ; R1 := print
   21 [-]: LOADK     R2 K11       ; R2 := "Wrong"
   22 [-]: CALL      R1 2 1       ;  := R1(R2) 
   23 [-]: JMP       51           ; PC += 51 (goto 75)



   24 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
   25 [-]: GETGLOBAL R2 K0        ; R2 := Combine
   26 [-]: MOVE      R3 R1        ; R3 := R1
   27 [-]: GETGLOBAL R4 K2        ; R4 := Enc2
   28 [-]: SELF      R5 R0 K12    ; R6 := R0; R5 := R0["sub"]
   29 [-]: LOADK     R7 K13       ; R7 := 1
   30 [-]: LOADK     R8 K14       ; R8 := 10
   31 [-]: CALL      R5 4 0       ; R5 to top := R5(R6 to R8)
   32 [-]: CALL      R4 0 0       ; R4 to top := R4(R5 to top)
   33 [-]: CALL      R2 0 1       ;  := R2(R3 to top)

   34 [-]: GETGLOBAL R2 K0        ; R2 := Combine
   35 [-]: MOVE      R3 R1        ; R3 := R1
   36 [-]: GETGLOBAL R4 K1        ; R4 := Enc1
   37 [-]: SELF      R5 R0 K12    ; R6 := R0; R5 := R0["sub"]
   38 [-]: LOADK     R7 K15       ; R7 := 11
   39 [-]: LOADK     R8 K16       ; R8 := 20
   40 [-]: CALL      R5 4 0       ; R5 to top := R5(R6 to R8)
   41 [-]: CALL      R4 0 0       ; R4 to top := R4(R5 to top)
   42 [-]: CALL      R2 0 1       ;  := R2(R3 to top)

   43 [-]: GETGLOBAL R2 K0        ; R2 := Combine
   44 [-]: MOVE      R3 R1        ; R3 := R1
   45 [-]: GETGLOBAL R4 K4        ; R4 := Enc4
   46 [-]: SELF      R5 R0 K12    ; R6 := R0; R5 := R0["sub"]
   47 [-]: LOADK     R7 K17       ; R7 := 21
   48 [-]: LOADK     R8 K18       ; R8 := 30
   49 [-]: CALL      R5 4 0       ; R5 to top := R5(R6 to R8)
   50 [-]: CALL      R4 0 0       ; R4 to top := R4(R5 to top)
   51 [-]: CALL      R2 0 1       ;  := R2(R3 to top)

   52 [-]: GETGLOBAL R2 K0        ; R2 := Combine
   53 [-]: MOVE      R3 R1        ; R3 := R1
   54 [-]: GETGLOBAL R4 K3        ; R4 := Enc3
   55 [-]: SELF      R5 R0 K12    ; R6 := R0; R5 := R0["sub"]
   56 [-]: LOADK     R7 K19       ; R7 := 31
   57 [-]: LOADK     R8 K9        ; R8 := 40
   58 [-]: CALL      R5 4 0       ; R5 to top := R5(R6 to R8)
   59 [-]: CALL      R4 0 0       ; R4 to top := R4(R5 to top)
   60 [-]: CALL      R2 0 1       ;  := R2(R3 to top)

   61 [-]: GETGLOBAL R2 K20       ; R2 := table
   62 [-]: GETTABLE  R2 R2 K21    ; R2 := R2["concat"]
   63 [-]: MOVE      R3 R1        ; R3 := R1
   64 [-]: LOADK     R4 K22       ; R4 := ","
   65 [-]: CALL      R2 3 2       ; R2 := R2(R3 to R4)
   66 [-]: EQ        0 R2 K23     ; if R2 == "112,101,98,105,105,106,94,113,98,112,126,79,120,55,98,101,92,98,117,51,50,45,108,78,42,89,70,45,108,111,59,58,82,111,115,59,73,78,127,131" then goto 68 else goto 72
   
   67 [-]: JMP       4            ; PC += 4 (goto 72)
   68 [-]: GETGLOBAL R3 K10       ; R3 := print
   69 [-]: LOADK     R4 K24       ; R4 := "Correct"
   70 [-]: CALL      R3 2 1       ;  := R3(R4)


   71 [-]: JMP       3            ; PC += 3 (goto 75)
   72 [-]: GETGLOBAL R3 K10       ; R3 := print
   73 [-]: LOADK     R4 K11       ; R4 := "Wrong"
   74 [-]: CALL      R3 2 1       ;  := R3(R4)
   75 [-]: RETURN    R0 1         ; return 

; Combine
; Function:        0_0
; Defined at line: 1
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  9

    0 [-]: LOADK     R2 K0        ; R2 := 1
    1 [-]: LEN       R3 R1        ; R3 := #R1
    2 [-]: LOADK     R4 K0        ; R4 := 1
    3 [-]: FORPREP   R2 5         ; R2 -= R4; pc += 5 (goto 9)
    4 [-]: GETGLOBAL R6 K1        ; R6 := table
    5 [-]: GETTABLE  R6 R6 K2     ; R6 := R6["insert"]
    6 [-]: MOVE      R7 R0        ; R7 := R0
    7 [-]: GETTABLE  R8 R1 R5     ; R8 := R1[R5]
    8 [-]: CALL      R6 3 1       ; R6(R7 to R8)
    9 [-]: FORLOOP   R2 -6        ; R2 += R4; if R2 <= R3 then R5 := R2; PC += -6 , goto 4 end
   10 [-]: RETURN    R0 1         ; return 


; Function:        0_1
; Defined at line: 7
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

    0 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
    1 [-]: LOADK     R2 K0        ; R2 := 1
    2 [-]: LEN       R3 R0        ; R3 := #R0
    3 [-]: LOADK     R4 K0        ; R4 := 1
    4 [-]: FORPREP   R2 12        ; R2 -= R4; pc += 12 (goto 17)
    5 [-]: SELF      R6 R0 K1     ; R7 := R0; R6 := R0["sub"]
    6 [-]: MOVE      R8 R5        ; R8 := R5
    7 [-]: MOVE      R9 R5        ; R9 := R5
    8 [-]: CALL      R6 4 2       ; R6 := R6(R7 to R9)
    9 [-]: GETGLOBAL R7 K2        ; R7 := table
   10 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["insert"]
   11 [-]: MOVE      R8 R1        ; R8 := R1
   12 [-]: SELF      R9 R6 K4     ; R10 := R6; R9 := R6["byte"]
   13 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   14 [-]: ADD       R9 R9 K5     ; R9 := R9 + 3
   15 [-]: MOD       R9 R9 K6     ; R9 := R9 % 256
   16 [-]: CALL      R7 3 1       ;  := R7(R8 to R9)
   17 [-]: FORLOOP   R2 -13       ; R2 += R4; if R2 <= R3 then R5 := R2; PC += -13 , goto 5 end
   18 [-]: RETURN    R1 2         ; return R1
   19 [-]: RETURN    R0 1         ; return 


; Function:        0_2
; Defined at line: 16
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

    0 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
    1 [-]: LOADK     R2 K0        ; R2 := 1
    2 [-]: LEN       R3 R0        ; R3 := 10
    3 [-]: LOADK     R4 K0        ; R4 := 1
    4 [-]: FORPREP   R2 12        ; R2 -= R4; pc += 12 (goto 17)
    5 [-]: SELF      R6 R0 K1     ; R7 := R0; R6 := R0["sub"]
    6 [-]: MOVE      R8 R5        ; R8 := R5
    7 [-]: MOVE      R9 R5        ; R9 := R5
    8 [-]: CALL      R6 4 2       ; R6 := R6(R7 to R9)
    9 [-]: GETGLOBAL R7 K2        ; R7 := table
   10 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["insert"]
   11 [-]: MOVE      R8 R1        ; R8 := R1
   12 [-]: SELF      R9 R6 K4     ; R10 := R6; R9 := R6["byte"]
   13 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   14 [-]: SUB       R9 R9 K5     ; R9 := R9 - 3
   15 [-]: MOD       R9 R9 K6     ; R9 := R9 % 256
   16 [-]: CALL      R7 3 1       ;  := R7(R8 to R9)
   17 [-]: FORLOOP   R2 -13       ; R2 += 1; if R2 <= 10 then R5 := R2; PC += -13 , goto 5 end
   18 [-]: RETURN    R1 2         ; return R1
   19 [-]: RETURN    R0 1         ; return 


; Function:        0_3
; Defined at line: 25
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

    0 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
    1 [-]: LOADK     R2 K0        ; R2 := 1
    2 [-]: LEN       R3 R0        ; R3 := #R0
    3 [-]: LOADK     R4 K0        ; R4 := 1
    4 [-]: FORPREP   R2 12        ; R2 -= R4; pc += 12 (goto 17)
    5 [-]: SELF      R6 R0 K1     ; R7 := R0; R6 := R0["sub"]
    6 [-]: MOVE      R8 R5        ; R8 := R5
    7 [-]: MOVE      R9 R5        ; R9 := R5
    8 [-]: CALL      R6 4 2       ; R6 := R6(R7 to R9)
    9 [-]: GETGLOBAL R7 K2        ; R7 := table
   10 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["insert"]
   11 [-]: MOVE      R8 R1        ; R8 := R1
   12 [-]: SELF      R9 R6 K4     ; R10 := R6; R9 := R6["byte"]
   13 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   14 [-]: ADD       R9 R9 K5     ; R9 := R9 + 6
   15 [-]: MOD       R9 R9 K6     ; R9 := R9 % 256
   16 [-]: CALL      R7 3 1       ;  := R7(R8 to R9)
   17 [-]: FORLOOP   R2 -13       ; R2 += R4; if R2 <= R3 then R5 := R2; PC += -13 , goto 5 end
   18 [-]: RETURN    R1 2         ; return R1
   19 [-]: RETURN    R0 1         ; return 


; Function:        0_4
; Defined at line: 34
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

    0 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
    1 [-]: LOADK     R2 K0        ; R2 := 1
    2 [-]: LEN       R3 R0        ; R3 := #R0
    3 [-]: LOADK     R4 K0        ; R4 := 1
    4 [-]: FORPREP   R2 12        ; R2 -= R4; pc += 12 (goto 17)
    5 [-]: SELF      R6 R0 K1     ; R7 := R0; R6 := R0["sub"]
    6 [-]: MOVE      R8 R5        ; R8 := R5
    7 [-]: MOVE      R9 R5        ; R9 := R5
    8 [-]: CALL      R6 4 2       ; R6 := R6(R7 to R9)
    9 [-]: GETGLOBAL R7 K2        ; R7 := table
   10 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["insert"]
   11 [-]: MOVE      R8 R1        ; R8 := R1
   12 [-]: SELF      R9 R6 K4     ; R10 := R6; R9 := R6["byte"]
   13 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   14 [-]: SUB       R9 R9 K5     ; R9 := R9 - 6
   15 [-]: MOD       R9 R9 K6     ; R9 := R9 % 256
   16 [-]: CALL      R7 3 1       ;  := R7(R8 to R9)
   17 [-]: FORLOOP   R2 -13       ; R2 += R4; if R2 <= R3 then R5 := R2; PC += -13 , goto 5 end
   18 [-]: RETURN    R1 2         ; return R1
   19 [-]: RETURN    R0 1         ; return 